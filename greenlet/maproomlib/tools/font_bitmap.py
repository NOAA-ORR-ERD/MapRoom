# coding: utf-8
"""
Basic script to create a PNG file containing standard ASCII characters. Also
creates an associated metadata file with offset and width/height information
for all of those characters.
"""
import xml
import wx
import wx.lib.fancytext as fancytext
import cgi
import pprint


def round_up_to_power_of_2( value ):
    power = 2

    while power < value:
        power *= 2

    return power


def RenderToRenderer( str, renderer, enclose = True ):
    try:
        if enclose:
            str = '<?xml version="1.0" encoding="utf-8"?><FancyText>%s</FancyText>' % str
            str = unicode( str ).encode( "utf-8" )

        p = xml.parsers.expat.ParserCreate()
        p.returns_unicode = 1
        p.StartElementHandler = renderer.startElement
        p.EndElementHandler = renderer.endElement
        p.CharacterDataHandler = renderer.characterData
        p.Parse( str, 1 )
    except xml.parsers.expat.error, err:
        raise ValueError('error parsing text text "%s": %s' % (str, err)) 


# Monkeypatch wx.lib.fancytext with a replacement RenderToRenderer() that
# actually supports unicode. See http://trac.wxwidgets.org/ticket/11664
wx.lib.fancytext.RenderToRenderer = RenderToRenderer


def main():
    FIRST_CHAR = 32
    LAST_CHAR = 126
    BITMAP_FILENAME = "font.png"
    METADATA_FILENAME = "Font_extents.py"
    EXTRA_CHARS = ( u"Â°", )

    everything = []
    metadata = {}
    x_origin = 0
    y_origin = 0

    app = wx.App( False )

    for char in range( FIRST_CHAR, LAST_CHAR + 1 ):
        char = chr( char )
        string = cgi.escape( char )
        everything.append( string )

        ( width, height ) = fancytext.GetExtent( string )

        # HACK! For some reason, GetExtent() returns an incorrect width for
        # the letter "V".
        if string == "V":
            width -= 1

        metadata[ char ] = [ x_origin, y_origin, width, height ]
        x_origin += width

    for string in EXTRA_CHARS:
        everything.append( string )

        ( width, height ) = fancytext.GetExtent( string )

        # HACK!
        x_origin -= 2

        metadata[ string ] = [ x_origin, y_origin, width, height ]
        x_origin += width

    bitmap = fancytext.RenderToBitmap(
        "".join( everything ),
        wx.Brush( wx.WHITE, wx.TRANSPARENT ),
    )
    image = wx.ImageFromBitmap( bitmap )
    size = (
        round_up_to_power_of_2( image.GetWidth() ),
        round_up_to_power_of_2( image.GetHeight() ),
    )
    origin = (
        0, size[ 1 ] - image.GetHeight(),
    )

    image = image.Resize( size, origin )

    result = image.SaveFile( BITMAP_FILENAME, wx.BITMAP_TYPE_PNG )

    if result:
        print "Saving %s succeeded" % BITMAP_FILENAME
    else:
        print "Saving %s failed" % BITMAP_FILENAME

    for value in metadata.values():
        value[ 0 ] += origin[ 0 ]
        value[ 1 ] += origin[ 1 ]

    metadata_file = open( METADATA_FILENAME, "w" )
    metadata_file.write( "########## AUTOGENERATED -- DO NOT EDIT ##########\n" )
    metadata_file.write( "FONT_EXTENTS = %s" % pprint.pformat( metadata ) )
    metadata_file.close()

    print "Saving %s succeeded" % METADATA_FILENAME


if __name__ == "__main__":
    main()
